// <auto-generated />
using LexiconA11.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LexiconA11.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220216131813_12many")]
    partial class _12many
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LexiconA11.Models.CityModel", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CountryId = 1,
                            Name = "Ankara"
                        },
                        new
                        {
                            CityId = 2,
                            CountryId = 1,
                            Name = "Istanbul"
                        },
                        new
                        {
                            CityId = 3,
                            CountryId = 2,
                            Name = "Malmö"
                        },
                        new
                        {
                            CityId = 4,
                            CountryId = 3,
                            Name = "Oslo"
                        });
                });

            modelBuilder.Entity("LexiconA11.Models.CountryModel", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "Turkiet"
                        },
                        new
                        {
                            CountryId = 2,
                            Name = "Somaliland"
                        },
                        new
                        {
                            CountryId = 3,
                            Name = "Sverige"
                        });
                });

            modelBuilder.Entity("LexiconA11.Models.PersonModel", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("PhoneNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            CityId = 1,
                            Name = "NissE",
                            PhoneNr = "09341"
                        },
                        new
                        {
                            PersonId = 2,
                            CityId = 2,
                            Name = "HassE",
                            PhoneNr = "020KNDÖDEN"
                        },
                        new
                        {
                            PersonId = 3,
                            CityId = 3,
                            Name = "Bojan E",
                            PhoneNr = "123CALLING"
                        });
                });

            modelBuilder.Entity("LexiconA11.Models.CityModel", b =>
                {
                    b.HasOne("LexiconA11.Models.CountryModel", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LexiconA11.Models.PersonModel", b =>
                {
                    b.HasOne("LexiconA11.Models.CityModel", "City")
                        .WithMany("Persons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("LexiconA11.Models.CityModel", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("LexiconA11.Models.CountryModel", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
